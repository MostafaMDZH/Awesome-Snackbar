export default class Snackbar {
    static List: Snackbar[];
    static readonly DEFAULT_HIDING_TIMEOUT: number;
    static readonly DEFAULT_POSITION: string;
    protected viewID: number;
    protected view: HTMLElement;
    protected message: string;
    protected position: string;
    protected iconSrc: string | undefined;
    protected theme: string | undefined;
    protected style: object | undefined;
    protected hideEventHandler: EventListenerOrEventListenerObject;
    protected actionText: string | undefined;
    protected onAction: (() => void) | undefined;
    protected bornTime: number;
    protected waitForEvent: boolean;
    protected timeout: number;
    protected isWaitingForHide: boolean;
    protected afterHide: (() => void) | undefined;
    constructor(message: string, options?: {
        position?: string;
        theme?: string;
        iconSrc?: string;
        style?: object;
        actionText?: string;
        onAction?: () => void;
        waitForEvent?: boolean;
        timeout?: number;
        afterHide?: () => void;
    });
    protected static appendCSS(): void;
    protected static generateViewID(): number;
    protected static getHtml(viewId: number): ChildNode;
    setMessage(message: string): void;
    setPosition(position: string): void;
    setIconSrc(iconSrc?: string): void;
    setTheme(theme?: string): void;
    setStyle(style?: object): void;
    setActionText(actionText?: string): void;
    protected setActionCallback(onAction?: () => void): void;
    protected show(): void;
    protected addHideEventListener(): void;
    protected removeHideEventListener(): void;
    protected handleHideEvent(): void;
    protected startHidingTimer(timeout: number): void;
    protected hide(): void;
    protected static adjustListPositions(sb: Snackbar): void;
    protected getHeight(): number;
}
